-- SATez Database Setup Script
-- version 2.2
-- This script creates/updates the necessary tables, policies, and triggers.
-- It is designed to be idempotent and can be run multiple times safely.

-- ============================================================
-- 1. TABLE CREATION
-- ============================================================

-- Table for public user profile data.
CREATE TABLE IF NOT EXISTS public.user_profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  name TEXT,
  email TEXT UNIQUE,
  avatar_url TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
COMMENT ON TABLE public.user_profiles IS 'Public profile information for each user.';

-- Table for vocabulary practice session results.
CREATE TABLE IF NOT EXISTS public.vocab_practice_results (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  word TEXT NOT NULL,
  is_correct BOOLEAN NOT NULL,
  selected_option TEXT NOT NULL,
  correct_option TEXT NOT NULL,
  time_spent INT NOT NULL, -- in seconds
  created_at TIMESTAMPTZ DEFAULT NOW()
);
COMMENT ON TABLE public.vocab_practice_results IS 'Stores results from vocabulary practice sessions.';

-- Table for reading practice session results.
CREATE TABLE IF NOT EXISTS public.reading_practice_results (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  passage_id TEXT NOT NULL,
  question_id TEXT NOT NULL,
  is_correct BOOLEAN NOT NULL,
  selected_option TEXT NOT NULL,
  correct_option TEXT NOT NULL,
  time_spent INT NOT NULL, -- in seconds
  created_at TIMESTAMPTZ DEFAULT NOW()
);
COMMENT ON TABLE public.reading_practice_results IS 'Stores results from reading practice sessions.';

-- Table for individual test question results.
-- We drop the old table first to ensure the schema is up-to-date.
DROP TABLE IF EXISTS public.full_length_test_results CASCADE;
CREATE TABLE public.test_question_results (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    test_id TEXT NOT NULL, -- which practice test (e.g., "test-1", "sat-practice-1")
    question_id TEXT NOT NULL, -- specific question identifier
    question_text TEXT, -- the actual question text for reference
    is_correct BOOLEAN NOT NULL,
    selected_option TEXT NOT NULL, -- what the user selected (A, B, C, D)
    correct_option TEXT NOT NULL, -- the correct answer (A, B, C, D)
    time_spent INTEGER NOT NULL, -- time spent on this question in seconds
    section TEXT, -- Math, Reading, Writing, etc.
    difficulty TEXT, -- Easy, Medium, Hard
    created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.test_question_results IS 'Stores individual question results from practice tests.';
COMMENT ON COLUMN public.test_question_results.time_spent IS 'Time spent on the question in seconds.';


-- ============================================================
-- 2. ENABLE ROW LEVEL SECURITY
-- ============================================================

ALTER TABLE public.user_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.vocab_practice_results ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.reading_practice_results ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.test_question_results ENABLE ROW LEVEL SECURITY;


-- ============================================================
-- 3. DROP EXISTING POLICIES (to avoid conflicts)
-- ============================================================

DROP POLICY IF EXISTS "Users can view their own profile." ON public.user_profiles;
DROP POLICY IF EXISTS "Users can insert their own profile." ON public.user_profiles;
DROP POLICY IF EXISTS "Users can update their own profile." ON public.user_profiles;

DROP POLICY IF EXISTS "Users can view their own vocab results." ON public.vocab_practice_results;
DROP POLICY IF EXISTS "Users can insert their own vocab results." ON public.vocab_practice_results;

DROP POLICY IF EXISTS "Users can view their own reading results." ON public.reading_practice_results;
DROP POLICY IF EXISTS "Users can insert their own reading results." ON public.reading_practice_results;

-- Policies for test_question_results are dropped by the CASCADE on DROP TABLE.


-- ============================================================
-- 4. CREATE RLS POLICIES
-- ============================================================

-- Policies for user_profiles
CREATE POLICY "Users can view their own profile."
ON public.user_profiles FOR SELECT
USING (auth.uid() = id);

CREATE POLICY "Users can insert their own profile."
ON public.user_profiles FOR INSERT
WITH CHECK (auth.uid() = id);

CREATE POLICY "Users can update their own profile."
ON public.user_profiles FOR UPDATE
USING (auth.uid() = id)
WITH CHECK (auth.uid() = id);

-- Policies for vocab_practice_results
CREATE POLICY "Users can view their own vocab results."
ON public.vocab_practice_results FOR SELECT
USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own vocab results."
ON public.vocab_practice_results FOR INSERT
WITH CHECK (auth.uid() = user_id);

-- Policies for reading_practice_results
CREATE POLICY "Users can view their own reading results."
ON public.reading_practice_results FOR SELECT
USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own reading results."
ON public.reading_practice_results FOR INSERT
WITH CHECK (auth.uid() = user_id);

-- Policies for test_question_results
CREATE POLICY "Users can view their own test question results"
ON public.test_question_results FOR SELECT
USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own test question results"
ON public.test_question_results FOR INSERT
WITH CHECK (auth.uid() = user_id);


-- ============================================================
-- 5. TRIGGERS AND FUNCTIONS
-- ============================================================

-- This function is called by a trigger when a new user signs up.
-- It creates a corresponding row in public.user_profiles.
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.user_profiles (id, email, name)
  VALUES (new.id, new.email, new.raw_user_meta_data->>'name');
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Drop trigger if it exists to avoid conflicts
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;

-- Create the trigger to call the function on user creation.
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();


-- ============================================================
-- 6. GRANT PERMISSIONS
-- ============================================================

-- Grant usage on the public schema to anon and authenticated roles.
GRANT USAGE ON SCHEMA public TO anon, authenticated;

-- Grant SELECT permissions on all tables to anon and authenticated roles.
-- RLS policies will filter the results appropriately.
GRANT SELECT ON ALL TABLES IN SCHEMA public TO anon, authenticated;

-- Grant INSERT, UPDATE, DELETE permissions for authenticated users.
-- RLS policies will enforce that they can only modify their own data.
GRANT INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO authenticated;

-- Grant permissions for all functions to anon and authenticated roles.
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO anon, authenticated;

-- Grant usage on all sequences to roles.
-- This is necessary for the `id` columns to auto-increment.
GRANT USAGE ON ALL SEQUENCES IN SCHEMA public TO anon, authenticated;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public to service_role; 